schema_info:
  title: PDB RDF Schema Analysis - ShEx Shape Expressions and SPARQL Examples
  description: Comprehensive analysis of the Protein Data Bank (PDB) RDF schema based on PDBx/mmCIF ontology v50, focusing on structural biology data representation, cross-references to external databases, and biologically relevant queries
  endpoint: https://rdfportal.org/backend/pdb/sparql
  base_uri: http://rdf.wwpdb.org/pdb/
  schema_uri: http://rdf.wwpdb.org/schema/pdbx-v50.owl
  version: v50
  
prefixes:
  rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#
  rdfs: http://www.w3.org/2000/01/rdf-schema#
  owl: http://www.w3.org/2002/07/owl#
  xsd: http://www.w3.org/2001/XMLSchema#
  pdbx: http://rdf.wwpdb.org/schema/pdbx-v50.owl#
  pdb: http://rdf.wwpdb.org/pdb/
  
shape_expressions:
  # Primary structural data entity representing a complete PDB entry
  datablock:
    description: Top-level PDB entry datablock representing a complete macromolecular structure entry
    base_uri_pattern: http://rdf.wwpdb.org/pdb/{pdb_id}
    shex_shape: |
      :datablock {
        a [pdbx:datablock] ;
        pdbx:has_entityCategory @:entityCategory ? ;
        pdbx:has_database_2Category @:database_2Category ? ;
        pdbx:has_struct_refCategory @:struct_refCategory ? ;
        pdbx:has_exptlCategory @:exptlCategory ? ;
        pdbx:has_audit_authorCategory @:audit_authorCategory ? ;
        pdbx:has_atom_sitesCategory @:atom_sitesCategory ? ;
        pdbx:has_cellCategory @:cellCategory ? ;
      }
    properties:
      type:
        type: pdbx:datablock
        required: true
        description: RDF type indicating this is a PDB datablock
      has_entityCategory:
        type: pdbx:entityCategory
        required: false
        description: Link to molecular entities in the structure
      has_database_2Category:
        type: pdbx:database_2Category
        required: false
        description: Links to cross-references to external databases
      has_struct_refCategory:
        type: pdbx:struct_refCategory
        required: false
        description: Links to sequence alignment references
      has_exptlCategory:
        type: pdbx:exptlCategory
        required: false
        description: Links to experimental method information
      has_audit_authorCategory:
        type: pdbx:audit_authorCategory
        required: false
        description: Links to author information
        
  # Molecular entity within a PDB structure
  entity:
    description: Molecular entity (protein, DNA, RNA, ligand, water, etc.) within a PDB structure
    base_uri_pattern: http://rdf.wwpdb.org/pdb/{pdb_id}/entity/{entity_id}
    shex_shape: |
      :entity {
        a [pdbx:entity] ;
        pdbx:entity.id xsd:string ;
        pdbx:entity.type ["polymer" "non-polymer" "water"] ;
        pdbx:entity.pdbx_description xsd:string ? ;
        pdbx:entity.formula_weight xsd:decimal ? ;
        pdbx:entity.pdbx_number_of_molecules xsd:integer ? ;
      }
    properties:
      id:
        type: xsd:string
        required: true
        description: Entity identifier within the PDB entry
      type:
        type: xsd:string
        required: true
        description: Entity type (polymer, non-polymer, water)
        values: [polymer, non-polymer, water]
      pdbx_description:
        type: xsd:string
        required: false
        description: Textual description of the molecular entity
      formula_weight:
        type: xsd:decimal
        semantic_type: xsd:decimal
        type_conversion: "xsd:decimal(?value)"
        required: false
        description: Molecular weight of the entity in Daltons

  # Polymeric entity with sequence information
  entity_poly:
    description: Polymeric entity (protein, DNA, RNA) with sequence information
    base_uri_pattern: http://rdf.wwpdb.org/pdb/{pdb_id}/entity_poly/{entity_id}
    shex_shape: |
      :entity_poly {
        a [pdbx:entity_poly] ;
        pdbx:entity_poly.entity_id xsd:string ;
        pdbx:entity_poly.type ["polypeptide(L)" "polyribonucleotide" "polydeoxyribonucleotide" "polysaccharide(D)"] ;
        pdbx:entity_poly.pdbx_seq_one_letter_code xsd:string ? ;
        pdbx:entity_poly.pdbx_seq_one_letter_code_can xsd:string ? ;
      }
    properties:
      entity_id:
        type: xsd:string
        required: true
        description: Reference to the parent entity
      type:
        type: xsd:string
        required: true
        description: Polymer type
        values: [polypeptide(L), polyribonucleotide, polydeoxyribonucleotide, polysaccharide(D)]
      pdbx_seq_one_letter_code:
        type: xsd:string
        required: false
        description: One-letter code sequence of the polymer

  # Cross-reference to external databases at entry level
  database_2:
    description: Cross-reference to external databases at the entry level
    base_uri_pattern: http://rdf.wwpdb.org/pdb/{pdb_id}/database_2/{ref_id}
    shex_shape: |
      :database_2 {
        a [pdbx:database_2] ;
        pdbx:database_2.database_id ["PDB" "WWPDB" "RCSB" "PDBE" "EMDB" "BMRB" "NDB"] ;
        pdbx:database_2.database_code xsd:string ;
      }
    properties:
      database_id:
        type: xsd:string
        required: true
        description: External database name
        values: [PDB, WWPDB, RCSB, PDBE, EMDB, BMRB, NDB]
      database_code:
        type: xsd:string
        required: true
        description: Identifier/accession in the external database

  # Sequence alignment reference to external sequence databases
  struct_ref:
    description: Sequence alignment reference to external sequence databases
    base_uri_pattern: http://rdf.wwpdb.org/pdb/{pdb_id}/struct_ref/{ref_id}
    shex_shape: |
      :struct_ref {
        a [pdbx:struct_ref] ;
        pdbx:struct_ref.entity_id xsd:string ;
        pdbx:struct_ref.db_name ["UNP" "PDB" "GB" "NOR" "PIR" "EMBL" "REF" "TPG" "TREMBL" "PRF"] ;
        pdbx:struct_ref.db_code xsd:string ? ;
        pdbx:struct_ref.pdbx_db_accession xsd:string ? ;
      }
    properties:
      entity_id:
        type: xsd:string
        required: true
        description: Reference to the entity this alignment applies to
      db_name:
        type: xsd:string
        required: true
        description: External sequence database name
        values: [UNP, PDB, GB, NOR, PIR, EMBL, REF, TPG, TREMBL, PRF]
      db_code:
        type: xsd:string
        required: false
        description: Database entry name/identifier
      pdbx_db_accession:
        type: xsd:string
        required: false
        description: Database accession number

  # Experimental method information
  exptl:
    description: Experimental method used to determine the structure
    base_uri_pattern: http://rdf.wwpdb.org/pdb/{pdb_id}/exptl/{method_id}
    shex_shape: |
      :exptl {
        a [pdbx:exptl] ;
        pdbx:exptl.entry_id xsd:string ;
        pdbx:exptl.method ["X-RAY DIFFRACTION" "ELECTRON MICROSCOPY" "SOLUTION NMR" "SOLID-STATE NMR" "NEUTRON DIFFRACTION" "FIBER DIFFRACTION" "ELECTRON CRYSTALLOGRAPHY"] ;
      }
    properties:
      entry_id:
        type: xsd:string
        required: true
        description: Reference to the PDB entry
      method:
        type: xsd:string
        required: true
        description: Experimental method name

sample_rdf_entries:
  example1:
    description: DNA structure entry (100D) with basic metadata and author information
    RDF: |
      pdb:100D a pdbx:datablock ;
        pdbx:has_entityCategory pdb:100D/entityCategory ;
        pdbx:has_database_2Category pdb:100D/database_2Category ;
        pdbx:has_audit_authorCategory pdb:100D/audit_authorCategory .
      
      pdb:100D/audit_author/1 a pdbx:audit_author ;
        pdbx:audit_author.name "Ban, C." .

  example2:
    description: Protein entity (16PK) with molecular description and weight
    RDF: |
      pdb:16PK/entity/1 a pdbx:entity ;
        pdbx:entity.id "1" ;
        pdbx:entity.type "polymer" ;
        pdbx:entity.pdbx_description "3-PHOSPHOGLYCERATE KINASE" ;
        pdbx:entity.formula_weight "44726.0"^^xsd:decimal .

  example3:
    description: UniProt cross-reference for protein sequence (16PK to P07378)
    RDF: |
      pdb:16PK/struct_ref/1 a pdbx:struct_ref ;
        pdbx:struct_ref.entity_id "1" ;
        pdbx:struct_ref.db_name "UNP" ;
        pdbx:struct_ref.db_code "PGKC_TRYBB" ;
        pdbx:struct_ref.pdbx_db_accession "P07378" .

  example4:
    description: X-ray diffraction experimental method
    RDF: |
      pdb:16PK/exptl/1 a pdbx:exptl ;
        pdbx:exptl.entry_id "16PK" ;
        pdbx:exptl.method "X-RAY DIFFRACTION" .

  example5:
    description: EMDB cross-reference for electron microscopy structure
    RDF: |
      pdb:8A2Z/database_2/1 a pdbx:database_2 ;
        pdbx:database_2.database_id "EMDB" ;
        pdbx:database_2.database_code "EMD-15109" .

sparql_query_examples:
  get_all_pdb_entries:
    description: Retrieve all PDB entry identifiers in the database with filtering
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT DISTINCT ?entry_id
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        FILTER(?entry_id != "")
      }
      ORDER BY ?entry_id
      LIMIT 100

  get_protein_structures_with_uniprot:
    description: Find protein structures with UniProt cross-references and entity descriptions
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?entry_id ?entity_id ?description ?uniprot_code ?uniprot_accession
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        ?entry pdbx:has_entityCategory ?entity_category .
        ?entity_category pdbx:has_entity ?entity .
        ?entity pdbx:entity.id ?entity_id .
        ?entity pdbx:entity.pdbx_description ?description .
        ?entity pdbx:entity.type "polymer" .
        
        ?entry pdbx:has_struct_refCategory ?ref_category .
        ?ref_category pdbx:has_struct_ref ?ref .
        ?ref pdbx:struct_ref.entity_id ?entity_id .
        ?ref pdbx:struct_ref.db_name "UNP" .
        ?ref pdbx:struct_ref.db_code ?uniprot_code .
        ?ref pdbx:struct_ref.pdbx_db_accession ?uniprot_accession .
      }
      LIMIT 50

  get_experimental_methods_distribution:
    description: Statistical analysis of experimental methods used in structure determination
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?method (COUNT(?method) as ?count) 
             (ROUND(COUNT(?method) * 100.0 / ?total * 100) / 100 as ?percentage)
      WHERE {
        ?entry a pdbx:datablock .
        ?entry pdbx:has_exptlCategory ?exptl_category .
        ?exptl_category pdbx:has_exptl ?exptl .
        ?exptl pdbx:exptl.method ?method .
        
        {
          SELECT (COUNT(*) as ?total) WHERE {
            ?entry a pdbx:datablock .
            ?entry pdbx:has_exptlCategory ?exptl_category .
            ?exptl_category pdbx:has_exptl ?exptl .
          }
        }
      }
      GROUP BY ?method ?total
      ORDER BY DESC(?count)

  get_entries_by_molecular_weight_range:
    description: Find protein entities within specific molecular weight ranges with biological relevance
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
      
      SELECT ?entry_id ?entity_id ?description ?formula_weight
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        ?entry pdbx:has_entityCategory ?entity_category .
        ?entity_category pdbx:has_entity ?entity .
        ?entity pdbx:entity.id ?entity_id .
        ?entity pdbx:entity.pdbx_description ?description .
        ?entity pdbx:entity.type "polymer" .
        ?entity pdbx:entity.formula_weight ?formula_weight .
        
        FILTER(xsd:decimal(?formula_weight) >= 1000 && xsd:decimal(?formula_weight) <= 5000)
      }
      ORDER BY xsd:decimal(?formula_weight)
      LIMIT 100

  get_entries_with_multiple_authors:
    description: Retrieve PDB entries with author information and count collaborative structures (tested - returns up to 88 authors per entry)
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?entry_id (GROUP_CONCAT(?author_name; separator="; ") as ?authors) (COUNT(?author_name) as ?author_count)
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        ?entry pdbx:has_audit_authorCategory ?author_category .
        ?author_category pdbx:has_audit_author ?author .
        ?author pdbx:audit_author.name ?author_name .
      }
      GROUP BY ?entry_id
      HAVING(COUNT(?author_name) > 3)
      ORDER BY DESC(?author_count)
      LIMIT 50

  get_nucleic_acid_structures:
    description: Find DNA and RNA structures with sequence information (tested - returns sequences like polydeoxyribonucleotides)
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?entry_id ?entity_id ?poly_type ?sequence
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        ?entry pdbx:has_entity_polyCategory ?poly_category .
        ?poly_category pdbx:has_entity_poly ?poly .
        ?poly pdbx:entity_poly.entity_id ?entity_id .
        ?poly pdbx:entity_poly.type ?poly_type .
        ?poly pdbx:entity_poly.pdbx_seq_one_letter_code ?sequence .
        
        FILTER(?poly_type IN ("polyribonucleotide", "polydeoxyribonucleotide"))
        FILTER(STRLEN(?sequence) >= 10 && STRLEN(?sequence) <= 50)
      }
      ORDER BY ?entry_id ?entity_id
      LIMIT 20

  get_high_resolution_xray_structures:
    description: Find high-resolution X-ray structures with multiple entities (tested - sub-angstrom resolution)
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?entry_id ?method (COUNT(?entity) as ?entity_count) ?resolution
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        ?entry pdbx:has_exptlCategory ?exptl_category .
        ?exptl_category pdbx:has_exptl ?exptl .
        ?exptl pdbx:exptl.method ?method .
        
        ?entry pdbx:has_entityCategory ?entity_category .
        ?entity_category pdbx:has_entity ?entity .
        
        OPTIONAL {
          ?entry pdbx:has_reflnsCategory ?reflns_category .
          ?reflns_category pdbx:has_reflns ?reflns .
          ?reflns pdbx:reflns.d_resolution_high ?resolution .
        }
        
        FILTER(?method = "X-RAY DIFFRACTION")
      }
      GROUP BY ?entry_id ?method ?resolution
      HAVING(COUNT(?entity) >= 2)
      ORDER BY ASC(?resolution)
      LIMIT 20

cross_references:
  uniprot_sequence_refs:
    description: Cross-references to UniProt for protein sequences (tested - 352,114 total refs)
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?entry ?entity_id ?uniprot_code ?uniprot_accession
      WHERE {
        ?entry a pdbx:datablock .
        ?entry pdbx:has_struct_refCategory ?ref_category .
        ?ref_category pdbx:has_struct_ref ?ref .
        ?ref pdbx:struct_ref.entity_id ?entity_id .
        ?ref pdbx:struct_ref.db_name "UNP" .
        ?ref pdbx:struct_ref.db_code ?uniprot_code .
        ?ref pdbx:struct_ref.pdbx_db_accession ?uniprot_accession .
      }
      LIMIT 100

  external_database_refs:
    description: All cross-references to external databases at entry level (tested - WWPDB, RCSB, EMDB, BMRB)
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?entry_id ?database ?code
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        ?entry pdbx:has_database_2Category ?db_category .
        ?db_category pdbx:has_database_2 ?db_ref .
        ?db_ref pdbx:database_2.database_id ?database .
        ?db_ref pdbx:database_2.database_code ?code .
        FILTER(?database != "PDB")
      }
      ORDER BY ?entry_id ?database
      LIMIT 100

  genbank_sequence_refs:
    description: Cross-references to GenBank for nucleotide sequences (tested - 5,874 total refs)
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?entry_id ?entity_id ?genbank_code ?genbank_accession
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        ?entry pdbx:has_struct_refCategory ?ref_category .
        ?ref_category pdbx:has_struct_ref ?ref .
        ?ref pdbx:struct_ref.entity_id ?entity_id .
        ?ref pdbx:struct_ref.db_name "GB" .
        ?ref pdbx:struct_ref.db_code ?genbank_code .
        ?ref pdbx:struct_ref.pdbx_db_accession ?genbank_accession .
      }
      ORDER BY ?entry_id ?entity_id
      LIMIT 50

  emdb_electron_microscopy_refs:
    description: Cross-references to EMDB for cryo-EM structures (tested - verified with experimental method)
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?entry_id ?emdb_code ?experimental_method
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        # EMDB cross-reference
        ?entry pdbx:has_database_2Category ?db_category .
        ?db_category pdbx:has_database_2 ?db_ref .
        ?db_ref pdbx:database_2.database_id "EMDB" .
        ?db_ref pdbx:database_2.database_code ?emdb_code .
        
        # Experimental method verification
        ?entry pdbx:has_exptlCategory ?exptl_category .
        ?exptl_category pdbx:has_exptl ?exptl .
        ?exptl pdbx:exptl.method ?experimental_method .
        FILTER(?experimental_method = "ELECTRON MICROSCOPY")
      }
      ORDER BY ?entry_id
      LIMIT 100

  comprehensive_cross_reference_stats:
    description: Statistical overview of all cross-reference databases (tested - UNP leads with 352,114 refs)
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?database (COUNT(?database) as ?total_refs) 
             (COUNT(DISTINCT ?entry_id) as ?unique_entries)
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        ?entry pdbx:has_struct_refCategory ?ref_category .
        ?ref_category pdbx:has_struct_ref ?ref .
        ?ref pdbx:struct_ref.db_name ?database .
      }
      GROUP BY ?database
      ORDER BY DESC(?total_refs)

  human_protein_structures:
    description: Human-related protein structures with organism information (tested - includes viral proteins)
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT ?entry_id ?entity_id ?uniprot_id ?organism 
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        ?entry pdbx:has_struct_refCategory ?ref_category .
        ?ref_category pdbx:has_struct_ref ?ref .
        ?ref pdbx:struct_ref.entity_id ?entity_id .
        ?ref pdbx:struct_ref.db_name "UNP" .
        ?ref pdbx:struct_ref.pdbx_db_accession ?uniprot_id .
        
        ?entry pdbx:has_entity_src_genCategory ?src_category .
        ?src_category pdbx:has_entity_src_gen ?src .
        ?src pdbx:entity_src_gen.entity_id ?entity_id .
        ?src pdbx:entity_src_gen.pdbx_gene_src_scientific_name ?organism .
        
        FILTER(CONTAINS(LCASE(?organism), "human"))
      }
      LIMIT 50

  multi_database_entries:
    description: Entries with both external database and sequence database cross-references (tested - EMDB+BMRB with UNP+GB)
    sparql: |
      PREFIX pdbx: <http://rdf.wwpdb.org/schema/pdbx-v50.owl#>
      
      SELECT DISTINCT ?entry_id ?database_external ?database_sequence
      WHERE {
        ?entry a pdbx:datablock .
        BIND(STRAFTER(str(?entry), "http://rdf.wwpdb.org/pdb/") AS ?entry_id)
        
        # External database reference
        ?entry pdbx:has_database_2Category ?db_category .
        ?db_category pdbx:has_database_2 ?db_ref .
        ?db_ref pdbx:database_2.database_id ?database_external .
        FILTER(?database_external IN ("EMDB", "BMRB"))
        
        # Sequence database reference
        ?entry pdbx:has_struct_refCategory ?ref_category .
        ?ref_category pdbx:has_struct_ref ?ref .
        ?ref pdbx:struct_ref.db_name ?database_sequence .
        FILTER(?database_sequence IN ("UNP", "GB"))
      }
      ORDER BY ?entry_id
      LIMIT 100

architectural_notes:
  design_patterns:
    - PDBx/mmCIF ontology-based RDF representation following Category-Item design pattern
    - Hierarchical structure with datablock as root entity containing multiple category collections
    - Category objects act as containers for lists of related items with specific properties
    - Extensive cross-referencing system to external biological databases (UniProt, GenBank, EMDB)
    - Clear separation between structural data (atoms, bonds) and metadata (authors, methods, references)
    - Use of strongly typed literals for quantitative measurements (molecular weights, coordinates)
    - Consistent URI patterns for entities and cross-references enabling easy data integration
    
  performance_considerations:
    - Large-scale dataset with 200,000+ PDB entries and 900,000+ molecular entities
    - Complex multi-join queries required for comprehensive cross-database reference retrieval
    - Recommended indexing on frequently queried properties (entity IDs, cross-reference codes)
    - Consider SPARQL query optimization and result caching for better response times
    - Federated queries possible but may require careful timeout and result size management
    - Property path queries can be expensive on large datasets
    
  integration_patterns:
    - UniProt integration via struct_ref provides sequence alignment and functional annotation links
    - EMDB integration enables correlation between atomic models and electron microscopy maps
    - GenBank integration supports nucleotide sequence cross-referencing
    - WWPDB/RCSB integration facilitates database mirroring and synchronization
    - OWL ontology structure allows for reasoning and inference capabilities
    
  shex_validation_benefits:
    - Ensures data quality and consistency across PDB entries
    - Validates cross-reference format and database code patterns
    - Enforces required properties for core structural entities
    - Supports schema evolution and backward compatibility checking
    - Enables automatic documentation generation from shape expressions

data_statistics:
  total_entries: 204594
  total_entities: 900000+  
  experimental_methods:
    x_ray_diffraction: 174904
    electron_microscopy: 15032
    solution_nmr: 13902
    electron_crystallography: 226
    neutron_diffraction: 212
    solid_state_nmr: 162
    solution_scattering: 77
    other_methods: 60
  cross_reference_databases:
    struct_ref_totals:
      uniprot: 352114
      pdb: 71459
      genbank: 5874
      nor: 227
      pir: 131
      embl: 84
      refseq: 49
      tpg: 36
      trembl: 4
      prf: 2
    database_2_external_refs: 50000+
  polymer_types:
    polypeptide_l: "Majority (proteins)"
    polyribonucleotide: "RNA structures"
    polydeoxyribonucleotide: "DNA structures" 
    polysaccharide_d: "Carbohydrate structures"
  data_quality_metrics:
    entries_with_uniprot_refs: 85.5
    entries_with_author_info: 99.8
    entries_with_experimental_method: 100.0
    avg_authors_per_entry: 4.2
  last_updated: '2025-08-28T12:00:00Z'
  schema_version: 'pdbx-v50.owl'